  openapi: 3.0.3
  info:
    title: Campus Borrowing Platform API
    description: API for managing users, items, borrow records, and notifications in a campus borrowing platform.
    version: 1.0.0
  servers:
    - url: http://localhost:8080
      description: Local development server
  paths:
    /api/users/{userId}:
      put:
        summary: Update user profile
        description: Updates user profile information (email, phone, avatar). Frozen users cannot update.
        tags:
          - User Management
        parameters:
          - name: userId
            in: path
            required: true
            schema:
              type: integer
              format: int64
          - name: User-ID
            in: header
            required: true
            schema:
              type: integer
              format: int64
            description: Authenticated user ID
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        responses:
          '200':
            description: Profile updated successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SuccessResponse'
          '403':
            description: User is frozen
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '404':
            description: User not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
    /api/users/{userId}/borrow-records:
      get:
        summary: Get user borrow records
        description: Retrieves paginated borrow records for a user (as borrower or owner).
        tags:
          - User Management
        parameters:
          - name: userId
            in: path
            required: true
            schema:
              type: integer
              format: int64
          - name: User-ID
            in: header
            required: true
            schema:
              type: integer
              format: int64
          - name: page
            in: query
            required: false
            schema:
              type: integer
              default: 1
          - name: size
            in: query
            required: false
            schema:
              type: integer
              default: 10
        responses:
          '200':
            description: List of borrow records
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    code:
                      type: integer
                      example: 200
                    message:
                      type: string
                      example: Success
                    data:
                      type: object
                      properties:
                        records:
                          type: array
                          items:
                            $ref: '#/components/schemas/BorrowRecord'
                        total:
                          type: integer
                          example: 100
                        page:
                          type: integer
                          example: 1
                        size:
                          type: integer
                          example: 10
          '404':
            description: User not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
    /api/users/{userId}/status:
      put:
        summary: Update user status (Admin only)
        description: Admin updates user status (normal, warning, frozen).
        tags:
          - User Management
        parameters:
          - name: userId
            in: path
            required: true
            schema:
              type: integer
              format: int64
          - name: User-ID
            in: header
            required: true
            schema:
              type: integer
              format: int64
            description: Admin user ID
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusDTO'
        responses:
          '200':
            description: Status updated successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SuccessResponse'
          '403':
            description: Not an admin
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '404':
            description: User not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
    /api/users/{userId}/credit-status:
      get:
        summary: Get user credit and status
        description: Retrieves user's credit score and status.
        tags:
          - User Management
        parameters:
          - name: userId
            in: path
            required: true
            schema:
              type: integer
              format: int64
          - name: User-ID
            in: header
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: Credit and status information
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    code:
                      type: integer
                      example: 200
                    message:
                      type: string
                      example: Success
                    data:
                      $ref: '#/components/schemas/UserCreditStatus'
          '404':
            description: User not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
    /api/items/{itemId}/approve:
      put:
        summary: Approve or reject item (Admin only)
        description: Admin approves or rejects an item listing.
        tags:
          - Item Management
        parameters:
          - name: itemId
            in: path
            required: true
            schema:
              type: integer
              format: int64
          - name: User-ID
            in: header
            required: true
            schema:
              type: integer
              format: int64
            description: Admin user ID
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApproveDTO'
        responses:
          '200':
            description: Item status updated
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SuccessResponse'
          '403':
            description: Not an admin
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '404':
            description: Item not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
    /api/items/{itemId}:
      put:
        summary: Update item
        description: Owner updates item details. Frozen users cannot update.
        tags:
          - Item Management
        parameters:
          - name: itemId
            in: path
            required: true
            schema:
              type: integer
              format: int64
          - name: User-ID
            in: header
            required: true
            schema:
              type: integer
              format: int64
            description: Owner user ID
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemDTO'
        responses:
          '200':
            description: Item updated successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SuccessResponse'
          '403':
            description: User is frozen or not owner
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '404':
            description: Item not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
      delete:
        summary: Delete item
        description: Owner deletes an item. Frozen users cannot delete.
        tags:
          - Item Management
        parameters:
          - name: itemId
            in: path
            required: true
            schema:
              type: integer
              format: int64
          - name: User-ID
            in: header
            required: true
            schema:
              type: integer
              format: int64
            description: Owner user ID
        responses:
          '200':
            description: Item deleted successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SuccessResponse'
          '403':
            description: User is frozen or not owner
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '404':
            description: Item not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
    /api/items:
      get:
        summary: Get item list
        description: Retrieves paginated list of items with optional filters.
        tags:
          - Item Management
        parameters:
          - name: keyword
            in: query
            required: false
            schema:
              type: string
            description: Search by item title
          - name: categoryId
            in: query
            required: false
            schema:
              type: integer
              format: int64
          - name: status
            in: query
            required: false
            schema:
              type: string
              enum: [available, borrowed, maintenance, inactive]
          - name: page
            in: query
            required: false
            schema:
              type: integer
              default: 1
          - name: size
            in: query
            required: false
            schema:
              type: integer
              default: 10
        responses:
          '200':
            description: List of items
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    code:
                      type: integer
                      example: 200
                    message:
                      type: string
                      example: Success
                    data:
                      type: object
                      properties:
                        records:
                          type: array
                          items:
                            $ref: '#/components/schemas/Item'
                        total:
                          type: integer
                          example: 100
                        page:
                          type: integer
                          example: 1
                        size:
                          type: integer
                          example: 10
    /api/borrow:
      post:
        summary: Submit borrow request
        description: User submits a borrow request. Warning or frozen users are restricted.
        tags:
          - Borrow Record Management
        parameters:
          - name: User-ID
            in: header
            required: true
            schema:
              type: integer
              format: int64
            description: Borrower user ID
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BorrowRequestDTO'
        responses:
          '200':
            description: Borrow request submitted
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SuccessResponse'
          '403':
            description: User is restricted
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '404':
            description: Item not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
    /api/borrow/{recordId}/review:
      put:
        summary: Review borrow request
        description: Owner or admin reviews a borrow request (approve/reject).
        tags:
          - Borrow Record Management
        parameters:
          - name: recordId
            in: path
            required: true
            schema:
              type: integer
              format: int64
          - name: User-ID
            in: header
            required: true
            schema:
              type: integer
              format: int64
            description: Owner or admin user ID
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewDTO'
        responses:
          '200':
            description: Borrow request reviewed
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SuccessResponse'
          '403':
            description: Unauthorized user
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '404':
            description: Record not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
    /api/borrow/{recordId}/return:
      put:
        summary: Return item
        description: Borrower returns an item with optional comments.
        tags:
          - Borrow Record Management
        parameters:
          - name: recordId
            in: path
            required: true
            schema:
              type: integer
              format: int64
          - name: User-ID
            in: header
            required: true
            schema:
              type: integer
              format: int64
            description: Borrower user ID
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReturnDTO'
        responses:
          '200':
            description: Item returned successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SuccessResponse'
          '403':
            description: Unauthorized user
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '404':
            description: Record not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
    /api/borrow/{recordId}/satisfaction:
      put:
        summary: Submit satisfaction rating
        description: Borrower or owner submits satisfaction rating (satisfied, neutral, unsatisfied).
        tags:
          - Borrow Record Management
        parameters:
          - name: recordId
            in: path
            required: true
            schema:
              type: integer
              format: int64
          - name: User-ID
            in: header
            required: true
            schema:
              type: integer
              format: int64
            description: Borrower or owner user ID
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SatisfactionDTO'
        responses:
          '200':
            description: Satisfaction submitted
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SuccessResponse'
          '403':
            description: Unauthorized user
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '404':
            description: Record not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
    /api/messages:
      post:
        summary: Send notification
        description: Sends a notification to a user (admin or system-triggered).
        tags:
          - Notification Management
        parameters:
          - name: User-ID
            in: header
            required: true
            schema:
              type: integer
              format: int64
            description: Admin user ID
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageDTO'
        responses:
          '200':
            description: Notification sent
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SuccessResponse'
          '403':
            description: Not an admin
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '404':
            description: User not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
      get:
        summary: Get user notifications
        description: Retrieves paginated notifications for a user.
        tags:
          - Notification Management
        parameters:
          - name: userId
            in: query
            required: true
            schema:
              type: integer
              format: int64
          - name: User-ID
            in: header
            required: true
            schema:
              type: integer
              format: int64
          - name: page
            in: query
            required: false
            schema:
              type: integer
              default: 1
          - name: size
            in: query
            required: false
            schema:
              type: integer
              default: 10
        responses:
          '200':
            description: List of notifications
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    code:
                      type: integer
                      example: 200
                    message:
                      type: string
                      example: Success
                    data:
                      type: object
                      properties:
                        records:
                          type: array
                          items:
                            $ref: '#/components/schemas/Message'
                        total:
                          type: integer
                          example: 100
                        page:
                          type: integer
                          example: 1
                        size:
                          type: integer
                          example: 10
          '404':
            description: User not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
    /api/messages/{messageId}/read:
      put:
        summary: Mark notification as read
        description: Marks a notification as read by the user.
        tags:
          - Notification Management
        parameters:
          - name: messageId
            in: path
            required: true
            schema:
              type: integer
              format: int64
          - name: User-ID
            in: header
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: Notification marked as read
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SuccessResponse'
          '403':
            description: Unauthorized user
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '404':
            description: Notification not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
    /api/announcements:
      post:
        summary: Publish announcement
        description: Admin publishes a platform-wide announcement.
        tags:
          - Notification Management
        parameters:
          - name: User-ID
            in: header
            required: true
            schema:
              type: integer
              format: int64
            description: Admin user ID
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnouncementDTO'
        responses:
          '200':
            description: Announcement published
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/SuccessResponse'
          '403':
            description: Not an admin
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
      get:
        summary: Get announcement list
        description: Retrieves paginated list of announcements.
        tags:
          - Notification Management
        parameters:
          - name: page
            in: query
            required: false
            schema:
              type: integer
              default: 1
          - name: size
            in: query
            required: false
            schema:
              type: integer
              default: 10
        responses:
          '200':
            description: List of announcements
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    code:
                      type: integer
                      example: 200
                    message:
                      type: string
                      example: Success
                    data:
                      type: object
                      properties:
                        records:
                          type: array
                          items:
                            $ref: '#/components/schemas/Announcement'
                        total:
                          type: integer
                          example: 100
                        page:
                          type: integer
                          example: 1
                        size:
                          type: integer
                          example: 10
  components:
    schemas:
      UserDTO:
        type: object
        properties:
          username:
            type: string
            example: student123
          email:
            type: string
            example: student@example.com
          phone:
            type: string
            example: "1234567890"
          avatarUrl:
            type: string
            example: http://example.com/avatar.jpg
        required:
          - username
          - email
      UserCreditStatus:
        type: object
        properties:
          userId:
            type: integer
            format: int64
            example: 1
          creditScore:
            type: integer
            example: 100
          status:
            type: string
            enum: [normal, warning, frozen]
            example: normal
          overdueCount:
            type: integer
            example: 0
          createdAt:
            type: string
            format: date-time
            example: 2025-07-14T14:38:00Z
          updatedAt:
            type: string
            format: date-time
            example: 2025-07-14T14:38:00Z
      Item:
        type: object
        properties:
          itemId:
            type: integer
            format: int64
            example: 1
          userId:
            type: integer
            format: int64
            example: 1
          title:
            type: string
            example: Laptop
          description:
            type: string
            example: A high-performance laptop
          categoryId:
            type: integer
            format: int64
            example: 1
          quantity:
            type: integer
            example: 1
          status:
            type: string
            enum: [available, borrowed, maintenance, inactive]
            example: available
          maxBorrowDays:
            type: integer
            example: 7
          imageUrl:
            type: string
            example: http://example.com/laptop.jpg
          createdAt:
            type: string
            format: date-time
            example: 2025-07-14T14:38:00Z
          updatedAt:
            type: string
            format: date-time
            example: 2025-07-14T14:38:00Z
      ItemDTO:
        type: object
        properties:
          title:
            type: string
            example: Laptop
          description:
            type: string
            example: A high-performance laptop
          categoryId:
            type: integer
            format: int64
            example: 1
          quantity:
            type: integer
            example: 1
          maxBorrowDays:
            type: integer
            example: 7
          imageUrl:
            type: string
            example: http://example.com/laptop.jpg
        required:
          - title
          - categoryId
          - quantity
          - maxBorrowDays
      BorrowRecord:
        type: object
        properties:
          recordId:
            type: integer
            format: int64
            example: 1
          itemId:
            type: integer
            format: int64
            example: 1
          borrowerId:
            type: integer
            format: int64
            example: 2
          borrowStart:
            type: string
            format: date-time
            example: 2025-07-14T14:38:00Z
          borrowEnd:
            type: string
            format: date-time
            example: 2025-07-21T14:38:00Z
          returnTime:
            type: string
            format: date-time
            example: 2025-07-20T14:38:00Z
          status:
            type: string
            enum: [pending, approved, rejected, returned, overdue]
            example: approved
          comments:
            type: string
            example: Item returned in good condition
          borrowerSatisfaction:
            type: string
            enum: [satisfied, neutral, unsatisfied]
            example: satisfied
          ownerSatisfaction:
            type: string
            enum: [satisfied, neutral, unsatisfied]
            example: satisfied
          createdAt:
            type: string
            format: date-time
            example: 2025-07-14T14:38:00Z
          updatedAt:
            type: string
            format: date-time
            example: 2025-07-14T14:38:00Z
      BorrowRequestDTO:
        type: object
        properties:
          itemId:
            type: integer
            format: int64
            example: 1
          purpose:
            type: string
            example: Need for a project
        required:
          - itemId
      ReviewDTO:
        type: object
        properties:
          status:
            type: string
            enum: [approved, rejected]
            example: approved
          comments:
            type: string
            example: Approved for borrowing
        required:
          - status
      ReturnDTO:
        type: object
        properties:
          comments:
            type: string
            example: Item returned in good condition
      SatisfactionDTO:
        type: object
        properties:
          satisfaction:
            type: string
            enum: [satisfied, neutral, unsatisfied]
            example: satisfied
        required:
          - satisfaction
      Message:
        type: object
        properties:
          messageId:
            type: integer
            format: int64
            example: 1
          userId:
            type: integer
            format: int64
            example: 1
          content:
            type: string
            example: Your borrow request has been approved
          type:
            type: string
            enum: [system, borrow, return, overdue, announcement]
            example: borrow
          isRead:
            type: boolean
            example: false
          createdAt:
            type: string
            format: date-time
            example: 2025-07-14T14:38:00Z
      MessageDTO:
        type: object
        properties:
          userId:
            type: integer
            format: int64
            example: 1
          content:
            type: string
            example: Your borrow request has been approved
          type:
            type: string
            enum: [system, borrow, return, overdue, announcement]
            example: borrow
        required:
          - userId
          - content
          - type
      Announcement:
        type: object
        properties:
          announcementId:
            type: integer
            format: int64
            example: 1
          title:
            type: string
            example: Platform Maintenance Notice
          content:
            type: string
            example: The platform will be down for maintenance on 2025-07-15
          adminId:
            type: integer
            format: int64
            example: 1
          createdAt:
            type: string
            format: date-time
            example: 2025-07-14T14:38:00Z
          updatedAt:
            type: string
            format: date-time
            example: 2025-07-14T14:38:00Z
      AnnouncementDTO:
        type: object
        properties:
          title:
            type: string
            example: Platform Maintenance Notice
          content:
            type: string
            example: The platform will be down for maintenance on 2025-07-15
          adminId:
            type: integer
            format: int64
            example: 1
        required:
          - title
          - content
          - adminId
      SuccessResponse:
        type: object
        properties:
          code:
            type: integer
            example: 200
          message:
            type: string
            example: Success
          data:
            type: object
            nullable: true
      ErrorResponse:
        type: object
        properties:
          code:
            type: integer
            example: 400
          message:
            type: string
            example: Invalid request
          data:
            type: object
            nullable: true
